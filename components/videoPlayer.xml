<krpano vp_minimized='false' vp_video='./video/planitarium.mp4' vp_jpg='./video/planitarium00.jpg' volume="0.8" close_btn="./UI/CLOSE3.png">
        

    <include url="../plugins/showtext.xml" />
	<textstyle name="SKIN_TOOLTIPS" font="Arial" fontsize="16" bold="true" italic="false" background="false" border="false" textcolor="0xFFFFFF" effect="dropshadow(1,45,0x000000,4,1);" fadeintime="0.1" fadetime="0.05" />
	<style name="closeBtn" keep="true" url="../UI/CLOSE2.png" align="lefttop" edge="center"  onclick="videoplayer_close();" />

    <action name="video_check">        
        if(get(vp_minimized), 
            set(vp_minimized, false);
            <!-- set(layer[videoplayer_bg].scale, 1); -->
            set(layer[videoplayer_bg].bgalpha, 0.8);
        
            tween(layer[videoplayer_bg].scale, 1, 0.5, easeOutBack);            
            set(layer[videoplayer_bg].onclick, videoplayer_minimize());
			set(layer[videoplayer_bg].enabled, true);


            <!-- set(plugin[videoplayer_plugin].scale, 1); -->
            <!-- set(plugin[videoplayer_plugin].alpha, 1); -->
            <!-- set(plugin[videoplayer_plugin].align, center);
            set(plugin[videoplayer_plugin].x, 0); -->
			set(layer[videoplayer_plugin].zorder, 1); 
			set(layer[videoplayer_plugin].parent, layer[videoplayer_bg]);

			set(layer[videoplayer_close].visible, true);
			set(layer[videoplayer_close].onclick, videoplayer_close());

			set(layer[videoplayer_plugin].align, center);			
            tween(plugin[videoplayer_plugin].scale, 1, 0.5, easeOutBack, do_time_bar(videoplayer_plugin,plugin[videoplayer_plugin],bottom,null,70%,10,0,-15,false,10));  
			tween(layer[videoplayer_plugin].x, 0);
			tween(layer[videoplayer_plugin].y, 0);         
			videoplayer_plugin_resize();
        , 			
            videoplayer_open(get(vp_video), get(vp_jpg), get(volume));
        );
    </action>

    <!-- update onclick action to minimize the video instead of closing it -->
    <action name="videoplayer_open">
        if(layer[videoplayer_bg] ,
            trace('videoplayer_open - there is already a videoplayer!');    
            js(console.log('videoplayer_open - there is already a videoplayer!'));

        ,
            <!-- Close Audio and make the audio button appear --> 
			close_audio();           
            <!-- step one - add a background layer and fade it in -->
            addlayer(videoplayer_bg);
            set(layer[videoplayer_bg].keep, true);
            set(layer[videoplayer_bg].type, container);
            set(layer[videoplayer_bg].zorder, 999999);
            set(layer[videoplayer_bg].safearea, false);
            set(layer[videoplayer_bg].align, lefttop);
            set(layer[videoplayer_bg].width, 100%);
            set(layer[videoplayer_bg].height, 100%);
            set(layer[videoplayer_bg].bgcolor, 0x000000);
            set(layer[videoplayer_bg].bgalpha, 0.8);
            set(layer[videoplayer_bg].bgcapture, true);
            set(layer[videoplayer_bg].handcursor, false);
            set(layer[videoplayer_bg].alpha, 0.0);
            set(layer[videoplayer_bg].onclick, videoplayer_minimize() );
            tween(layer[videoplayer_bg].alpha, 1.0, 0.5, default,
				<!-- step two - after the fade-in add the videoplayer plugin -->
				addlayer(videoplayer_plugin);
				set(layer[videoplayer_plugin].keep, true);
				set(layer[videoplayer_plugin].parent, layer[videoplayer_bg]);
				set(layer[videoplayer_plugin].align, center);
				set(layer[videoplayer_plugin].loop, false);
				set(layer[videoplayer_plugin].onclick, if_minimized());
				set(layer[videoplayer_plugin].alpha, 0.0);
				set(layer[videoplayer_plugin].scale, 0.0);				
						
				
				set(layer[videoplayer_plugin].onvideocomplete, videoplayer_close(););
				set(layer[videoplayer_plugin].onloaded, videoplayer_plugin_ready(%1));
				<!-- set(plugin[videoplayer_plugin].onhover, js(console.log(get(plugin[videoplayer_plugin].time )))); -->
				if('%2' != null, set(layer[videoplayer_plugin].posterurl,'%2'); );
				if('%3' != null, set(layer[videoplayer_plugin].volume,'%3'); );
				if(device.flash,
					set(layer[videoplayer_plugin].url,'%VIEWER%/plugins/videoplayer.swf');
				,
					set(layer[videoplayer_plugin].url,'%VIEWER%/plugins/videoplayer.js');
				);
            );			
        );        
    </action>

	<action name="if_minimized">
		if(get(vp_minimized),
			video_check();
		,
			togglepause(); 
		);
	</action>

    <action name="videoplayer_plugin_ready">      
        if(plugin[videoplayer_plugin],
            set(events[videoplayer_events].onresize, videoplayer_plugin_resize());
            set(layer[videoplayer_plugin].pausedonstart, true);
            set(layer[videoplayer_plugin].onvideoready,                                             
                    videoplayer_plugin_resize();
                    tween(scale,1,0.5,easeOutBack);
                    tween(alpha,1,0.5,default, ifnot(device.ios, play(); videoplayer_close_btn(); do_time_bar(videoplayer_plugin,layer[videoplayer_plugin],bottom,null,70%,10,0,-15,false,10) )); 
            );                 
            layer[videoplayer_plugin].playvideo(%1);            
        ); 		
	</action>

	<action name="videoplayer_close_btn">
		if(plugin[videoplayer_plugin],
			addlayer(videoplayer_close);
			set(layer[videoplayer_close].type, "image");
			if (device.mobile, set(layer[videoplayer_close].scale, 0.07);, set(layer[videoplayer_close].scale, 0.1););				
			set(layer[videoplayer_close].style, "tooltip");
			set(layer[videoplayer_close].url, get(close_btn));
			set(layer[videoplayer_close].keep, true);
			set(layer[videoplayer_close].parent, layer[videoplayer_plugin]);
			set(layer[videoplayer_close].align, righttop);
			set(layer[videoplayer_close].x, 1%);	
			set(layer[videoplayer_close].y, 1%);	
			set(layer[videoplayer_close].zorder, 1);			
			set(layer[videoplayer_close].onclick, videoplayer_close());
			set(layer[videoplayer_close].tooltip, "Close Video");
			set(layer[videoplayer_close].onhover, tween(layer[videoplayer_close].scale, 0.15));
			set(layer[videoplayer_close].onout, tween(layer[videoplayer_close].scale, 0.1));
		);
	</action>

    <action name="videoplayer_plugin_resize">
    if(get(vp_minimized),        
        <!-- use 90% width or height of available screen size -->
        div(aspect, layer[videoplayer_plugin].imagewidth, layer[videoplayer_plugin].imageheight);
        mul(new_videowidth, stagewidth, 0.90);
        div(new_videoheight, new_videowidth, aspect);
        mul(max_videoheight, stageheight, 0.90);
        if(new_videoheight GT max_videoheight,
            copy(new_videoheight, max_videoheight);
            mul(new_videowidth, new_videoheight, aspect);		
        );
		<!-- js(console.log(get(stageheight)));
		js(console.log("change")); -->		
		<!-- set(layer[videoplayer_bg].y, aspect); -->
        roundval(new_videowidth);
        roundval(new_videoheight);
        copy(layer[videoplayer_plugin].width, new_videowidth);
        copy(layer[videoplayer_plugin].height, new_videoheight);   

        ,
        <!-- use 90% width or height of available screen size -->
        div(aspect, layer[videoplayer_plugin].imagewidth, layer[videoplayer_plugin].imageheight);
        mul(new_videowidth, stagewidth, 0.90);
        div(new_videoheight, new_videowidth, aspect);
        mul(max_videoheight, stageheight, 0.80);
        if(new_videoheight GT max_videoheight,
            copy(new_videoheight, max_videoheight);
            mul(new_videowidth, new_videoheight, aspect);
        );
        roundval(new_videowidth);
        roundval(new_videoheight);
        copy(layer[videoplayer_plugin].width, new_videowidth);
        copy(layer[videoplayer_plugin].height, new_videoheight);   
    );     
	</action>

    <action name="videoplayer_close">
        set(events.[videoplayer_events].name, null);
		if(layer[videoplayer_plugin], layer[videoplayer_plugin].pause());
		set(layer[videoplayer_bg].onclick, null);

		tween(layer[videoplayer_plugin].scale, 0.0, 0.5, easeInBack);
		tween(layer[videoplayer_close].scale, 0.0, 0.5, easeInBack);
		tween(layer[videoplayer_bg].alpha, 0.0, 0.5, default,
			removelayer(videoplayer_plugin);
			removelayer(videoplayer_bg);
			removelayer(videoplayer_close);	
			set(hotspot[play_btn].visible, true);		
		); 
        <!-- removelayer(videoplayer_plugin);
		removelayer(videoplayer_bg); -->
	</action>

    <action name="videoplayer_minimize">        
        set(vp_minimized, true);
        if(layer[videoplayer_bg],
			set(layer[videoplayer_plugin].parent, "");
			div(smallscale, stagewidth, layer[videoplayer_bg].imagewidth);			
			div(smallscale, get(smallscale), 4);
			tween(layer[videoplayer_bg].scale, get(smallscale));
			<!-- tween(layer[videoplayer_bg].x, 1.5%);
			tween(layer[videoplayer_bg].y, 3%); -->
            set(layer[videoplayer_bg].bgalpha, 0.0);
			set(layer[videoplayer_bg].onclick, null);
			set(layer[videoplayer_bg].enabled, false);

			set(layer[videoplayer_close].visible, false);
			set(layer[videoplayer_close].onclick, null);

            <!-- set(layer[videoplayer_bg].scale, 0.2);             -->
            <!-- tween(layer[videoplayer_bg].scale, 0.2, 0.5, easeOutBack); -->            
            <!-- set(plugin[videoplayer_plugin].align, "lefftop");
            set(plugin[videoplayer_plugin].x, 50%); -->
            <!-- set(plugin[videoplayer_plugin].alpha, 1); -->
			<!-- js(console.log(get(layer[videoplayer_plugin].scale))); -->
			div(smallscale2, stagewidth, layer[videoplayer_plugin].imagewidth);			
			div(smallscale2, get(smallscale2), 4);
            set(layer[videoplayer_plugin].scale, 0.25); 
            set(layer[videoplayer_plugin].zorder, 999999); 

			set(layer[videoplayer_plugin].align, lefttop);
            tween(layer[videoplayer_plugin].scale, 0.25, 0.5, easeOutBack, do_time_bar(videoplayer_plugin,layer[videoplayer_plugin],bottom,null,70%,10,0,-15,false,10));
			tween(layer[videoplayer_plugin].x, 1.5%);
			tween(layer[videoplayer_plugin].y, 3%);
			<!-- js(console.log(get(layer[videoplayer_plugin].scale))); -->
        ,
            trace("videoplayer_minimize - background layer doesn't exist");
        );  
    </action>








    
    <action name="do_time_bar">	
		<!-- do_time_bar( video plugin name , parent , align , edge , width , height , x , y , keep , zorder );
		-
		- a good place to call the action is inside the onvideoready event of the videoplayer plugin...
		-
		- example:  onvideoready="do_time_bar( video_plugin_name , video_plugin_name );"
		- this example should be enough for an time bar as child of an videoplayer plugin at its bottom...
		- the missing parameters will be set by the action with default values....
		-
		- example:  onvideoready="do_time_bar(video,null,bottom,null,70%,6,0,20,false,10);"
		- this example should create an time bar inside the AREA, aligned at the bottom, without edge,
		- with a width of 70% of the area width, an height of 6, x at 0, y at 20, keep as false and
		- an zorder of 10....
		- it could be used as a detached time bar for a videoplayer plugin, 
		- or for an 360 videoplayer usage....
		-
		- example:  onvideoready="do_time_bar(video,stage,bottom,null,70%,6,0,20,false,10);"
		- same as above but on STAGE instead of AREA...
		-
		- to remove the timebar I have added an erase_time_bar() action...
		-
		- I just realize that I missed the case of a video player as hotspot :(...
		- I will implement this in a future release ;)...
		-->
		addplugin(time_bar);	
		set(plugin[time_bar].url, white.jpg );
		set(plugin[time_bar].plugin_video_is, %1 );
		ifnot(%2 == null , set(plugin[time_bar].parent, %2 ); );
		if(%3 == null , set(plugin[time_bar].align, bottom ); , set(plugin[time_bar].align, %3 ); );
		if(%4 == null , copy(plugin[time_bar].edge, plugin[time_bar].align ); , set(plugin[time_bar].edge, %4 ); );
		if(%5 == null , copy(plugin[time_bar].width, plugin[%1].width ); , set(plugin[time_bar].width, %5 ); );
		if(%6 == null , set(plugin[time_bar].height, 10 ); , set(plugin[time_bar].height, %6 ); );
		if(%7 == null , set(plugin[time_bar].x, 0 ); , set(plugin[time_bar].x, %7 ); );
		if(%8 == null , set(plugin[time_bar].y, -12 ); , set(plugin[time_bar].y, %8 ); );
		if(%9 == null , set(plugin[time_bar].keep, false ); , set(plugin[time_bar].keep, %9 ); );
		if(%10 == null , add(z_order,get(plugin[%1].zorder),1); copy(plugin[time_bar].zorder, z_order ); , set(plugin[time_bar].zorder, %10 ); );
		set(plugin[time_bar].alpha, 1 );
		<!-- set(plugin[time_bar].onhover, get_time(); ); -->
		<!-- set(plugin[time_bar].ondown, getseek(); ); -->
		set(plugin[time_bar].accuracy,1);
		set(plugin[time_bar].keep,true);
		
		addplugin(loadedbytes_);
		set(plugin[loadedbytes_].type, text );
		set(plugin[loadedbytes_].parent, time_bar );
		set(plugin[loadedbytes_].capture, false );
		set(plugin[loadedbytes_].children, false );
		set(plugin[loadedbytes_].selectable, false );
		set(plugin[loadedbytes_].alpha, 0.5 );
		set(plugin[loadedbytes_].align, leftbottom );
		copy(plugin[loadedbytes_].height, plugin[time_bar].height );
		add(z_order,get(plugin[time_bar].zorder),1);
		copy(plugin[loadedbytes_].zorder, z_order );
		set(plugin[loadedbytes_].background, true );
		set(plugin[loadedbytes_].backgroundcolor, 0x000000 );
		set(plugin[loadedbytes_].keep, true );
		
		addplugin(time_);
		set(plugin[time_].type, text );
		set(plugin[time_].parent, time_bar );
		set(plugin[time_].capture, false );
		set(plugin[time_].children, false );
		set(plugin[time_].selectable, false );
		set(plugin[time_].align, leftbottom );
		copy(plugin[time_].height, plugin[time_bar].height );
		add(z_order,get(plugin[time_bar].zorder),2);
		copy(plugin[time_].zorder, z_order );
		set(plugin[time_].background, true );
		set(plugin[time_].backgroundcolor, 0xFF0000 );
		set(plugin[time_].keep, true );
		
		addplugin(time_seek);
		set(plugin[time_seek].url, gris.jpg );
		set(plugin[time_seek].parent, time_bar );
		set(plugin[time_seek].align, left );
		set(plugin[time_seek].width, 10 );
		set(plugin[time_seek].keep, true );
		add(temp,get(plugin[time_bar].height),2);
		copy(plugin[time_seek].height, temp );
		add(z_order,get(plugin[time_bar].zorder),3);
		copy(plugin[time_seek].zorder, z_order );
		<!-- set(plugin[time_seek].onhover, showtext([textformat leftmargin='4' rightmargin='4']Seek[/textformat]); );
		set(plugin[time_seek].ondown, set(onhover, );  startdragingslider(););
		set(plugin[time_seek].onup, set(onhover,showtext([textformat leftmargin='4' rightmargin='4']Seek[/textformat])); stopdragingslider(); getseek(); );		 -->
		set(plugin[time_bar].onloaded, refresh_time_bar(%1));	
	</action>
	
	<action name="refresh_time_bar">
		if(plugin[time_bar].loaded,
			div(temp,plugin[time_bar].pixelwidth,plugin[%1].totaltime);
			mul(temp,temp,plugin[%1].time);
			if(temp GE plugin[time_bar].pixelwidth,copy(temp,plugin[time_bar].pixelwidth));
			if(temp LT 1,set(temp,1));
			set(plugin[time_].width,get(temp));
			sub(temp1,plugin[time_bar].pixelwidth,plugin[time_seek].pixelwidth);
			if(temp GE temp1,set(temp,get(temp1)));
			ifnot(seek_dragging,set(plugin[time_seek].x,get(temp)));
			div(temp,plugin[time_bar].pixelwidth,plugin[%1].totalbytes);
			mul(temp,temp,plugin[%1].loadedbytes);
			if(temp GE plugin[time_bar].pixelwidth,copy(temp,plugin[time_bar].pixelwidth));
			if(temp LT 1,set(temp,1));
			set(plugin[loadedbytes_].width,get(temp));;
			delayedcall(0.1,refresh_time_bar(%1));
			);
	</action>
	
	<action name="get_mouse_offset">	
		set(inside_area,true);
		set(parents_X,0);
		
		check_for_parents(%1);
		<!-- mouse_x_offset -->
		if(inside_area,
			get_parents_X(get(parents_return), area.pixelwidth);
			sub(mouse_x_offset, mouse.x, parents_X);
			,			
			get_parents_X(get(parents_return),stagewidth);
			sub(mouse_x_offset, mouse.stagex, parents_X);
		);			
		
		div(temp, plugin[%2].totaltime, plugin[time_bar].pixelwidth);
		mul(temp, temp, mouse.x);
		<!-- roundval(temp, 1); -->
		if(temp LT 1,set(temp,0));
	</action>
	
	<action name="check_for_parents">
		set(parents_return,%1);
		if(plugin[%1].edge === null, copy(plugin[%1].edge,  plugin[%1].align););
		ifnot(plugin[%1].parent === null ,
			if(plugin[%1].parent == stage, set(inside_area,false););
			if(plugin[%1].parent == bglayer, set(inside_area,false));
			if(plugin[%1].parent == '',set(plugin[%1].parent,null));
			ifnot(plugin[%1].parent == null,
				ifnot(plugin[%1].parent == stage,
					ifnot(plugin[%1].parent == bglayer,
						<!-- the plugin[time_bar]  has a parent -->
						copy(parent_is,plugin[%1].parent);
						get_parents_X(%1,get(plugin[%parent_is].pixelwidth),get(plugin[%1].parent));
						);
					);
				);
			);
	</action>
	
	<action name="get_parents_X">
		if(plugin[%1].align === null		, offset_case0(%1,%2) );
		if(plugin[%1].align == lefttop		, offset_case1(%1,%2) );
		if(plugin[%1].align == left			, offset_case1(%1,%2) );
		if(plugin[%1].align == leftbottom	, offset_case1(%1,%2) );
		if(plugin[%1].align == top			, offset_case2(%1,%2) );
		if(plugin[%1].align == center		, offset_case2(%1,%2) );
		if(plugin[%1].align == bottom		, offset_case2(%1,%2) );
		if(plugin[%1].align == righttop		, offset_case3(%1,%2) );
		if(plugin[%1].align == right		, offset_case3(%1,%2) );
		if(plugin[%1].align == rightbottom	, offset_case3(%1,%2) );
		if(%3 != null , check_for_parents(%3) );
	</action>
	
	<action name="offset_case0">
		//trace('*** nothing to do as there is no alignement in this case and x is not taken in account !!!');
	</action>
	
	<action name="offset_case1">
		copy(align_offset,plugin[%1].x);		
		edge_correction(%1);
	</action>
	
	<action name="offset_case2">
		div(half_pixelwidth, %2, 2);
		add(align_offset, half_pixelwidth, plugin[%1].x);
		edge_correction(%1);
	</action>
	
	<action name="offset_case3">
		sub(align_offset, %2, plugin[%1].x);
		edge_correction(%1);
	</action>
	
	<action name="edge_correction">
		if(plugin[%1].edge == righttop		, sub(align_offset, plugin[%1].pixelwidth); );
		if(plugin[%1].edge == right			, sub(align_offset, plugin[%1].pixelwidth); );
		if(plugin[%1].edge == rightbottom	, sub(align_offset, plugin[%1].pixelwidth); );
		if(plugin[%1].edge == top		, div(half_plugin_pixelwidth, plugin[%1].pixelwidth, 2); sub(align_offset, half_plugin_pixelwidth); );
		if(plugin[%1].edge == center	, div(half_plugin_pixelwidth, plugin[%1].pixelwidth, 2); sub(align_offset, half_plugin_pixelwidth); );
		if(plugin[%1].edge == bottom	, div(half_plugin_pixelwidth, plugin[%1].pixelwidth, 2); sub(align_offset, half_plugin_pixelwidth); );
		
		add(parents_X,align_offset);
	</action>
	
	<action name="getseek">
		get_mouse_offset( time_bar , get(plugin[time_bar].plugin_video_is ));
		txtadd(call_cmd,'plugin[',get(plugin[time_bar].plugin_video_is),'].seek(get(temp))');
		call_cmd();
	</action>
	
	<action name="get_time">
		get_mouse_offset( time_bar , get(plugin[time_bar].plugin_video_is ));
		copy(temps,temp);
		roundval(temps);
		if(temps GE 60,
			div(min,temps,60); copy(temp_min,min); roundval(min);
			if(min GT temp_min, sub(min,1););
			mod(cur_hlookat,temps,60);
			if(min LT 10,
				txtadd(minuts,0,get(min));
				,
				copy(minuts,min);
				);
			,
			set(minuts,'00');
			);
		mul(temp,minuts,60);
		sub(seconds,temps,temp);
		if(seconds LT 10, txtadd(seconds,0,get(seconds)));
		txtadd(temps,get(minuts),:,get(seconds));
		txtadd(temps,[textformat leftmargin='4' rightmargin='4'],get(minuts),:,get(seconds),[/textformat]);
		txtadd(call_cmd,"showtext( ",get(temps)," )");
		call_cmd();
	</action>

	<action name="startdragingslider">
		get_mouse_offset( time_bar , get(plugin[time_bar].plugin_video_is ));		
		set(seek_dragging,true);
		dragslider(time_bar);
	</action>

	<action name="stopdragingslider">
		set(seek_dragging, false);
	</action>

	<action name="dragslider">
		if(seek_dragging,
			div(temp,plugin[time_seek].pixelwidth,2);
			sub(xpos, mouse_x_offset, temp); 
			sub(xmax, plugin[%1].pixelwidth, plugin[time_seek].pixelwidth);
			if(xpos LT 0, set(xpos,0));
			if(xpos GT xmax, copy(xpos,xmax));
			copy(plugin[time_seek].x, xpos);
			
			delayedcall(0.01, dragslider(%1) );
			);
	</action>

	<action name="erase_time_bar">
		removeplugin(time_bar);
		removeplugin(loadedbytes_);
		removeplugin(time_);
		removeplugin(time_seek);
	</action>   
    
  
</krpano>

